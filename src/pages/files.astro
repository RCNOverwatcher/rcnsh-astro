---
export const prerender = false;
process.env.NODE_TLS_REJECT_UNAUTHORIZED = "0";

import Layout from "@layouts/Layout.astro";
import Footer from "@components/Footer";
import Credits from "@components/Credits.astro";
import Header from "@components/Header.astro";
import { parseStringPromise } from "xml2js";
import FolderTable from "@components/FolderTable";

interface FileData {
  key: string;
  size: number;
  lastModified: string;
}

interface FolderData {
  name: string;
  contents: (FileData | FolderData)[];
}

let data = [] as FileData[];

interface Content {
  Key: string[];
  LastModified: string[];
  Size: string[];
}

interface ListBucketResult {
  Contents: Content[];
}

const buildNestedStructure = (files: FileData[]): FolderData => {
  const root: FolderData = { name: "", contents: [] };

  files.forEach((file) => {
    const parts = file.key.split("/");
    let currentFolder = root;

    parts.forEach((part, index) => {
      if (index === parts.length - 1) {
        // It's a file
        currentFolder.contents.push(file);
      } else {
        // It's a folder
        let folder = currentFolder.contents.find(
          (item) => "name" in item && item.name === part,
        ) as FolderData;

        if (!folder) {
          folder = { name: part, contents: [] };
          currentFolder.contents.push(folder);
        }

        currentFolder = folder;
      }
    });
  });

  return root;
};

const fetchXMLData = async (): Promise<ListBucketResult> => {
  try {
    const response = await fetch(
      "https://rcn.ams3.digitaloceanspaces.com",
    );
    const xmlText = await response.text();
    const result = await parseStringPromise(xmlText);
    return result.ListBucketResult;
  } catch (err) {
    console.error(err);
    return {} as ListBucketResult;
  }
};

const XMLResult = await fetchXMLData();

let nestedData: FolderData | null = null;
if (XMLResult) {
  const fileData: FileData[] = XMLResult.Contents.filter(
    (item: Content) => parseInt(item.Size[0]) > 64,
  ).map((item: Content) => {
    return {
      key: item.Key[0],
      size: parseInt(item.Size[0]),
      lastModified: item.LastModified[0],
    };
  });

  nestedData = buildNestedStructure(fileData);
} else {
  console.log("Failed to fetch or parse XML data.");
}
---

<Layout title="rcn.sh â€¢ Files" image="https://rcn.sh/api/og.png?title=Files">
  <main
    class="text-[#c5c0b8] h-[100dvh] min-h-[100dvh] w-[100dvw] overflow-x-hidden py-8 flex flex-col"
    transition:animate="fade"
  >
    <Header />
    <h1 class="text-center font-mono text-xl lg:text-3xl md:text-2xl">Files</h1>
    <section
      class="mx-auto w-[100%] text-[#cdc8c2] md:w-[50%] md:text-left mt-10"
    >
      <FolderTable
        data={nestedData || { name: "", contents: [] }}
        client:load
      />
    </section>
    <div class="mt-auto">
      <Footer client:only="react">
        <Credits />
      </Footer>
    </div>
  </main>
</Layout>
